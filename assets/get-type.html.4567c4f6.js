import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as l,c as r,a as n,b as s,w as o,e as i,d as a}from"./app.6acf8a6b.js";const u={},k=i(`<p>js\u6570\u636E\u7C7B\u578B\u5224\u65AD\u7684\u51E0\u79CD\u65B9\u5F0F\uFF0C<mark>\u63A8\u8350\u7B2C\u56DB\u79CD\uFF0C\u6700\u5168\u6700\u51C6\u786E</mark></p><h3 id="\u5B9E\u73B0\u65B9\u5F0F\u4E00-\u4F7F\u7528typeof" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u65B9\u5F0F\u4E00-\u4F7F\u7528typeof" aria-hidden="true">#</a> <strong>\u5B9E\u73B0\u65B9\u5F0F\u4E00\uFF1A\u4F7F\u7528typeof</strong></h3><p>\u4EC5\u80FD\u8FD4\u56DE\u51E0\u79CD\u5224\u65AD\u7C7B\u578B\uFF1Astring\uFF0Cnumber\uFF0Cbigint\uFF0Cboolean\uFF0Cundefined\uFF0Cobject\uFF0Cfunction\uFF0Csymbol</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B9E\u73B0\u65B9\u5F0F\u4E00-\u4F7F\u7528instanceof" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u65B9\u5F0F\u4E00-\u4F7F\u7528instanceof" aria-hidden="true">#</a> <strong>\u5B9E\u73B0\u65B9\u5F0F\u4E00\uFF1A\u4F7F\u7528instanceof</strong></h3><p>\u5224\u65AD\u4E00\u4E2A\u5B9E\u4F8B\u662F\u5426\u5C5E\u4E8E\u67D0\u79CD\u7C7B\u578B\uFF1A\u5982\uFF1AObject\uFF0CArray\uFF0CFunction\uFF0CDate\uFF0CRegExp\uFF0C\u6784\u9020\u51FD\u6570\u7684\u5B9E\u4F8B\u3001\u7C7B\u7684\u5B9E\u4F8B\u7B49\u3002 \u4E3B\u8981\u662F\u901A\u8FC7\u539F\u578B\u94FE\u6765\u5224\u65AD\uFF1A\u53EA\u8981\u53F3\u8FB9\u53D8\u91CF\u7684 prototype \u5728\u5DE6\u8FB9\u53D8\u91CF\u7684\u539F\u578B\u94FE\u4E0A\u5373\u53EF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span> Type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value1 <span class="token keyword">instanceof</span> <span class="token class-name">Type</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u7B80\u5355\u5B9E\u73B0\u4E00\u4E2Ainstanceof</span>
<span class="token keyword">const</span> <span class="token function-variable function">myInstanceof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5DE6\u4FA7\u53C2\u6570\u975E\u5BF9\u8C61\u76F4\u63A5\u8FD4\u56DEfalse</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Object</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!==</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightType <span class="token operator">=</span> <span class="token keyword">typeof</span> right
    <span class="token comment">// \u5BF9\u4E8E\u53F3\u4FA7\u53C2\u6570\u53EF\u4EE5\u8BA4\u4E3A\u53EA\u80FD\u4E3A\u51FD\u6570\u6216\u5BF9\u8C61\u4E14\u4E0D\u80FD\u6CA1\u6709Prototype\u5C5E\u6027</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rightType <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> rightType <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Right-hand side of &#39;instanceof&#39; is not an object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightPrototype <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftProto <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftProto <span class="token operator">===</span> rightPrototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        leftProto <span class="token operator">=</span> leftProto<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">// \u904D\u5386\u5DE6\u8FB9\u539F\u578B\u94FE\uFF0C\u76F4\u5230\u627E\u5230\u53F3\u8FB9\u7684prototype</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B9E\u73B0\u65B9\u5F0F\u4E09-\u4F7F\u7528constructor" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u65B9\u5F0F\u4E09-\u4F7F\u7528constructor" aria-hidden="true">#</a> <strong>\u5B9E\u73B0\u65B9\u5F0F\u4E09\uFF1A\u4F7F\u7528constructor</strong></h3><p>\u6709\u6784\u9020\u51FD\u6570\u7684\u7C7B\u578B\u90FD\u53EF\u4EE5\u901A\u8FC7\u6B64\u5224\u65AD\uFF0C\u7A33\u5B9A\u6027\u4E0D\u8DB3\u3002 \u6CE8\u610F\u70B9\uFF1A</p><ul><li>\u7EAF\u6570\u5B57\u3001null\u3001undefined\u662F\u4E0D\u53EF\u4EE5\u7684</li><li>\u91CD\u5199prototype\u540E\uFF0Cconstructor\u4F1A\u9ED8\u8BA4\u4E3AObject</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> value<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> type<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> AsyncFunction<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;asyncFunction&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> GeneratorFunction<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;generatorFunction&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Symbol<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;regExp&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Map<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;map&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> WeakMap<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;weakMap&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Set<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> WeakSet<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;weakSet&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Blob<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;blob&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Uint8Array<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;uint8Array&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">//   \u8FD8\u6709\u66F4\u591A</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B9E\u73B0\u65B9\u5F0F\u56DB-\u4F7F\u7528object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0\u65B9\u5F0F\u56DB-\u4F7F\u7528object-prototype-tostring-call" aria-hidden="true">#</a> <strong>\u5B9E\u73B0\u65B9\u5F0F\u56DB\uFF1A\u4F7F\u7528Object.prototype.toString.call</strong></h3><p>Object.prototype.toString.call(value) \u7684\u8FD4\u56DE\u683C\u5F0F\u4E3A[object,Type]\uFF0CType\u662F\u5177\u4F53\u7684\u6570\u636E\u7C7B\u578B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//   \u679A\u4E3E\u90E8\u5206\u7C7B\u578B</span>
  <span class="token comment">//   const map = {</span>
  <span class="token comment">//     &#39;[object String]&#39;: &#39;string&#39;,</span>
  <span class="token comment">//     &#39;[object Number]&#39;: &#39;number&#39;</span>
  <span class="token comment">//     &#39;[object Boolean]&#39;: &#39;boolean&#39;,</span>
  <span class="token comment">//     &#39;[object Undefined]&#39;: &#39;undefined&#39;,</span>
  <span class="token comment">//     &#39;[object Object]&#39;: &#39;object&#39;,</span>
  <span class="token comment">//     &#39;[object Function]&#39;: &#39;function&#39;,</span>
  <span class="token comment">//     &#39;[object AsyncFunction]&#39;: &#39;asyncFunction&#39;,</span>
  <span class="token comment">//     &#39;[object GeneratorFunction]&#39;: &#39;generatorFunction&#39;,</span>
  <span class="token comment">//     &#39;[object Symbol]&#39;: &#39;symbol&#39;,</span>
  <span class="token comment">//     &#39;[object Null]&#39;: &#39;null&#39;,</span>
  <span class="token comment">//     &#39;[object Array]&#39;: &#39;array&#39;,</span>
  <span class="token comment">//     &#39;[object Date]&#39;: &#39;date&#39;,</span>
  <span class="token comment">//     &#39;[object RegExp]&#39;: &#39;regExp&#39;,</span>
  <span class="token comment">//     &#39;[object Map]&#39;: &#39;map&#39;,</span>
  <span class="token comment">//     &#39;[object WeakMap]&#39;: &#39;weakMap&#39;,</span>
  <span class="token comment">//     &#39;[object Set]&#39;: &#39;set&#39;,</span>
  <span class="token comment">//     &#39;[object WeakSet]&#39;: &#39;weakSet&#39;,</span>
  <span class="token comment">//     &#39;[object Blob]&#39;: &#39;blob&#39;,</span>
  <span class="token comment">//     &#39;[object HTMLDocument]&#39;: &#39;document&#39;,</span>
  <span class="token comment">//     &#39;[object Uint8Array]&#39;: &#39;uint8Array&#39;,</span>
  <span class="token comment">//     &#39;[object Error]&#39;: &#39;error&#39;</span>
  <span class="token comment">//   };</span>
  <span class="token comment">//   \u8FD8\u6709\u66F4\u591A</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object (\\S+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u672C\u6587\u5730\u5740\uFF1A</p>`,15),d={href:"https://confluence.uuyang.cn/universal/data-structure/faq/get-type.html",target:"_blank",rel:"noopener noreferrer"},v=a("https://confluence.uuyang.cn/universal/data-structure/faq/get-type.html"),m=n("p",null,"\u53C2\u8003",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"},y=a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof"),g={href:"https://blog.csdn.net/mozuncangtianbaxue/article/details/77151598",target:"_blank",rel:"noopener noreferrer"},f=a("https://blog.csdn.net/mozuncangtianbaxue/article/details/77151598"),h={href:"https://juejin.cn/post/6844903613584654344",target:"_blank",rel:"noopener noreferrer"},w=a("https://juejin.cn/post/6844903613584654344"),_=n("p",null,"\u76F8\u5173\u6587\u7AE0\u63A8\u8350",-1),j=a("\u6DF1\u62F7\u8D1DdeepClone\u8BE6\u89E3"),x=a("\u624B\u5199debounce\u3001throttle"),S={href:"https://github.com/lcp-code/code-base",target:"_blank",rel:"noopener noreferrer"},T=a("\u5404\u8BED\u8A00\u6570\u636E\u7ED3\u6784\u4E0E\u7B97\u6CD5\u5B9E\u64CD"),E=a("c\u3001c++\u3001java\u3001go\u3001python\u3001javascript\u7B49\u5404\u8BED\u8A00\u7279\u6027,\u85AA\u8D44\u5206\u5E03");function F(O,A){const t=p("ExternalLinkIcon"),e=p("RouterLink");return l(),r("div",null,[k,n("ul",null,[n("li",null,[n("a",d,[v,s(t)])])]),m,n("ul",null,[n("li",null,[n("a",b,[y,s(t)])]),n("li",null,[n("a",g,[f,s(t)])]),n("li",null,[n("a",h,[w,s(t)])])]),_,n("ul",null,[n("li",null,[s(e,{to:"/universal/data-structure/faq/deep-clone.html"},{default:o(()=>[j]),_:1})]),n("li",null,[s(e,{to:"/universal/data-structure/faq/debounce-throttle.html"},{default:o(()=>[x]),_:1})]),n("li",null,[n("a",S,[T,s(t)])]),n("li",null,[s(e,{to:"/universal/lang/lang-feature.html"},{default:o(()=>[E]),_:1})])])])}var B=c(u,[["render",F],["__file","get-type.html.vue"]]);export{B as default};
