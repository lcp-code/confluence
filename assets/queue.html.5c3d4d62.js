import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as l,c as i,a as n,b as s,w as e,e as u,d as a}from"./app.9b1cd719.js";const r={},k=u(`<h3 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> <strong>\u5B9A\u4E49</strong></h3><p>\u961F\u5217\u53EF\u4EE5\u5728\u4E00\u7AEF\u6DFB\u52A0\u5143\u7D20\uFF0C\u5728\u53E6\u4E00\u7AEF\u53D6\u51FA\u5143\u7D20\uFF0C\u4E5F\u5C31\u662F\uFF1A\u5148\u8FDB\u5148\u51FA\u3002</p><h3 id="\u7528\u9014" tabindex="-1"><a class="header-anchor" href="#\u7528\u9014" aria-hidden="true">#</a> <strong>\u7528\u9014</strong></h3><ul><li>\u5728\u591A\u7EBF\u7A0B\u963B\u585E\u961F\u5217\u7BA1\u7406\u4E2D\u975E\u5E38\u9002\u7528\u3002</li><li>\u6F0F\u6876\u7B97\u6CD5\u3002</li></ul><h3 id="\u961F\u5217\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217\u7684\u5B9E\u73B0" aria-hidden="true">#</a> <strong>\u961F\u5217\u7684\u5B9E\u73B0</strong></h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/** \u5355\u5411\u94FE\u8868\u8282\u70B9\u5B9A\u4E49 */</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** \u8282\u70B9\u503C */</span>
  value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** \u8282\u70B9\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9 */</span>
  next<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> next<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** \u4F7F\u7528\u94FE\u8868\u5B9E\u73B0\u7B80\u5355\u961F\u5217 */</span>
<span class="token keyword">class</span> <span class="token class-name">SimpleQueue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** \u5934\u8282\u70B9 */</span>
  <span class="token keyword">private</span> head<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/** \u5C3E\u8282\u70B9 */</span>
  <span class="token keyword">private</span> tail<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * \u5165\u961F,\u63D2\u5165\u961F\u5C3E
   * <span class="token keyword">@param</span> <span class="token parameter">value</span>
   */</span>
  <span class="token keyword">public</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * \u51FA\u961F,\u5728\u961F\u5934\u5220\u9664
   */</span>
  <span class="token keyword">public</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>p<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6D4B\u8BD5\u4EE3\u7801</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53C2\u8003</p>`,9),d={href:"https://github.com/lcp-code/code-base/blob/main/typescript/09_queue/SimpleQueue.ts",target:"_blank",rel:"noopener noreferrer"},v=a("https://github.com/lcp-code/code-base/blob/main/typescript/09_queue/SimpleQueue.ts"),m={href:"https://blog.csdn.net/yeyazhishang/article/details/82353846",target:"_blank",rel:"noopener noreferrer"},b=a("https://blog.csdn.net/yeyazhishang/article/details/82353846"),h=n("p",null,"\u76F8\u5173\u6587\u7AE0\u63A8\u8350",-1),y=a("\u7F13\u5B58\u6DD8\u6C70\u7B97\u6CD5"),w=a("\u6DF1\u62F7\u8D1DdeepClone\u8BE6\u89E3"),_=a("\u624B\u5199debounce\u3001throttle"),f=a("\u6570\u7EC4"),g=a("\u94FE\u8868"),E=a("\u6808"),q=a("\u4F7F\u7528\u53CC\u6808\u7ED3\u6784\u5B9E\u73B0\u6D4F\u89C8\u5668\u7684\u524D\u8FDB\u540E\u9000");function x(N,T){const p=o("ExternalLinkIcon"),t=o("RouterLink");return l(),i("div",null,[k,n("ul",null,[n("li",null,[n("a",d,[v,s(p)])]),n("li",null,[n("a",m,[b,s(p)])])]),h,n("ul",null,[n("li",null,[s(t,{to:"/zh/universal/algorithm/faq/lru.html"},{default:e(()=>[y]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/faq/deep-clone.html"},{default:e(()=>[w]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/faq/debounce-throttle.html"},{default:e(()=>[_]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/linear/array.html"},{default:e(()=>[f]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/linear/linked.html"},{default:e(()=>[g]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/linear/stack.html"},{default:e(()=>[E]),_:1})]),n("li",null,[s(t,{to:"/zh/universal/data-structure/linear/stack.html#%E4%BD%BF%E7%94%A8%E5%8F%8C%E6%A0%88%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B%E5%90%8E%E9%80%80"},{default:e(()=>[q]),_:1})])])])}var z=c(r,[["render",x],["__file","queue.html.vue"]]);export{z as default};
