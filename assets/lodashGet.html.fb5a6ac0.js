import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as t}from"./app.11b077a9.js";const p={},e=t(`<h3 id="\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a> <strong>\u5B9A\u4E49</strong></h3><p>\u901A\u8FC7keyPath\u53D6\u503C\uFF0C\u517C\u5BB9\u4E24\u79CD\u683C\u5F0F&#39;a.b[0].c&#39;\u548C&#39;a.b.0.c&#39;\u3002</p><h3 id="\u7B97\u6CD5\u6B65\u9AA4" tabindex="-1"><a class="header-anchor" href="#\u7B97\u6CD5\u6B65\u9AA4" aria-hidden="true">#</a> <strong>\u7B97\u6CD5\u6B65\u9AA4</strong></h3><ol><li>obj\u683C\u5F0F\u6821\u9A8C\uFF0CkeyPath\u683C\u5F0F\u6821\u9A8C</li><li>\u628A\u4E24\u79CD\u683C\u5F0F\u7684keyPath &#39;a.b[0].c&#39;\u548C&#39;a.b.0.c&#39;\u90FD\u8F6C\u6210\u7EDF\u4E00\u7684\u6570\u7EC4\u683C\u5F0F</li><li>\u5FAA\u73AF\u6570\u7EC4\u53D6\u503C\u3002</li></ol><h3 id="\u7528\u9014" tabindex="-1"><a class="header-anchor" href="#\u7528\u9014" aria-hidden="true">#</a> <strong>\u7528\u9014</strong></h3><ul><li>\u5B89\u5168\u7684\u901A\u8FC7keyPath\u53D6\u503C</li></ul><h3 id="\u7B97\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u7B97\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <strong>\u7B97\u6CD5\u5B9E\u73B0</strong></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span>
    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object (\\w+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObjectLike</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">getType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token function">getType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>object<span class="token operator">|</span>array<span class="token punctuation">}</span></span> <span class="token parameter">obj</span>
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">keyPath</span> \u540C\u65F6\u517C\u5BB9\u4E24\u79CD\u683C\u5F0F&#39;a.b[0].c&#39;\u548C&#39;a.b.0.c&#39;
 * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">}</span></span> <span class="token parameter">defaultValue</span>
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">lodashGet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keyPath<span class="token punctuation">,</span> defaultValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObjectLike</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;obj\u683C\u5F0F\u6709\u8BEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">||</span> <span class="token operator">!</span>keyPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;keyPath\u683C\u5F0F\u6709\u8BEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> keyArr <span class="token operator">=</span> keyPath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextKeyArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> keyArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> keyArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>item<span class="token operator">?.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\W\\w_\\d]*\\[\\d+\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> itemMatch <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([\\W\\w_\\d]*)\\[(\\d+)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> key1 <span class="token operator">=</span> itemMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          nextKeyArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> key2 <span class="token operator">=</span> itemMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          nextKeyArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;keyPath\u683C\u5F0F\u6709\u8BEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      nextKeyArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> nextKeyArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> resValue <span class="token operator">=</span> obj<span class="token punctuation">;</span>
  <span class="token keyword">let</span> isError<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObjectLike</span><span class="token punctuation">(</span>resValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resValue <span class="token operator">=</span> resValue<span class="token punctuation">[</span>nextKeyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObjectLike</span><span class="token punctuation">(</span>resValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u975E\u7C7B\u5BF9\u8C61\u518D\u53D6\u503C</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;\u53D6\u503C\u6709\u8BEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> resValue <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> isError <span class="token operator">?</span> defaultValue <span class="token operator">:</span> resValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6D4B\u8BD5\u4EE3\u7801</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">a1</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test1 \u683C\u5F0F1&quot;</span><span class="token punctuation">,</span> <span class="token function">lodashGet</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token string">&quot;a.b[0].c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test1 \u683C\u5F0F2&quot;</span><span class="token punctuation">,</span> <span class="token function">lodashGet</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> <span class="token string">&quot;a.b.0.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test2 \u683C\u5F0F1&quot;</span><span class="token punctuation">,</span> <span class="token function">lodashGet</span><span class="token punctuation">(</span>test2<span class="token punctuation">,</span> <span class="token string">&quot;[0].c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test2 \u683C\u5F0F2&quot;</span><span class="token punctuation">,</span> <span class="token function">lodashGet</span><span class="token punctuation">(</span>test2<span class="token punctuation">,</span> <span class="token string">&quot;0.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;defaultValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[e];function c(l,u){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","lodashGet.html.vue"]]);export{r as default};
